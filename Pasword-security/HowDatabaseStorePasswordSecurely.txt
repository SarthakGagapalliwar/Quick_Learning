

hashFunction => same Input =Same Output   but cant go backword
Common attacker tool: rainbow tables

Rainbow tables are precomputed hash → password maps for common salts/hashes.
Defense: use unique random salt per user and a strong adaptive hash. Salting makes rainbow tables ineffective.
To defend against rainbow tables, systems add a unique random "salt"



Popular adaptive hashing algorithms
bcrypt — long-standing, reliable. Tunable cost parameter (log rounds).
scrypt — designed to be memory-hard (slows GPU/ASIC attacks).
Argon2 — modern winner of the password-hashing competition; use Argon2id (hybrid) in most cases.
PBKDF2 — widely supported and reliable when you use sufficiently high 
iteration counts (and HMAC-SHA-2). Good fallback where modern libraries aren’t available.
Recommendation: prefer Argon2id when available; bcrypt is acceptable; 
scrypt and PBKDF2 are OK with correct parameters. Always tune parameters 
to current hardware and your throughput/latency requirements.


so they user =>
hash =  H(password +  salt + Pepper)

how to compmety deside what secury is enfort?
Best practices / OWASP checklist (actionable)

Never store plaintext passwords.
Use a unique random salt per password (per user).
Use adaptive/modern algorithms (Argon2id preferred).
Assume compromise: design so a stolen database reveals minimal attack surface (unique salts, slow KDFs).
Rate limit and monitor authentication attempts.
Require strong password policies (length > 12, encourage passphrases) and offer 2FA.
Use passkeys/WebAuthn where possible to reduce reliance on passwords.
Plan for parameter updates — be able to rehash on next login if your cost parameters change.
Keep pepper secret outside the DB (use a vault/HSM) if you choose to use one.
Use proven libraries and test them via threat models and code reviews.



modern word :Google => user password + unique salt =>>> adaptive hash (bcrype/agrot2) stoer in DB 
+ optinal + perror (kept oyside DB)


adnvabce : Amazon Cognitio(srp)
user pass + salt -> veryfiy (mathcal val,not pssoeod)
store in Db verfiry only
authnticatuon: secure remote pasword (SRP) protocal
Result : password itself is never store ,even hasing

On SRP and Cognito
SRP (Secure Remote Password) is a protocol that allows verification of
 a password without the server learning the plaintext password. Some services (e.g., AWS Cognito) implement SRP flows so
the server never stores a plain password-equivalent verifier that allows trivial replay.
Result: even if the DB is leaked, the raw password is not directly recoverable and verification requires correct SRP math.



Hash — deterministic one-way transform: same input → same output; not reversible.
Salt — a per-user unique random value stored with the hash to prevent precomputed attacks (rainbow tables) and make identical passwords look different.
Pepper — a secret value kept separate from the database (e.g., in environment, HSM, or vault). It’s applied in addition to salt to raise difficulty for attackers who steal the DB.
Adaptive (memory/time-hard) KDFs / hashing algorithms — algorithms whose cost can be adjusted (work factor, memory, iterations) so you can raise the cost as hardware improves.
SRP (Secure Remote Password) — a zero-knowledge authentication protocol that verifies a user without sending or storing the raw password; used by systems like AWS Cognito.
OWASP — security guidance for web apps (see recommended best practices below).
Passkeys / WebAuthn — phishing-resistant, public-key-based authentication that avoids passwords entirely.